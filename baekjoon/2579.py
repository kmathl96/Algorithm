# 계단 오르기
# 다이나믹 프로그래밍

import sys
input = sys.stdin.readline

N = int(input()) # 계단의 개수
stair = [int(input()) for _ in range(N)] # 각 계단에 쓰여 있는 점수

# dp[i] = [(i-1)번째 계단은 밟지 않고 i번째 계단을 밟은 경우의 점수,
#          (i-1)번째 계단과 i번째 계단을 밟은 경우의 점수]
dp = [[0,0] for _ in range(N+1)]
dp[1][0],dp[1][1] = stair[0],stair[0] # 첫번째 계단을 밟는 경우의 점수 초기화

# 두번째 계단부터 마지막 계단까지 순서대로 점수 계산
for i in range(2,N+1):
    # 1. 이전 계단을 뛰어넘고 i번째 계단을 밟는 경우
    # 점수의 최댓값 = (전전(i-2) 계단을 밟은 경우의 점수 중 최댓값) + (i번째 계단의 점수)
    dp[i][0] = max(dp[i-2])+stair[i-1]

    # 2. 이전 계단과 연속으로 밟는 경우
    # 점수의 최댓값 = (전전 계단은 건너뛰고 이전 계단을 밟은 경우의 점수) + (i번째 계단의 점수)
    # 세 칸 연속 밟을 수 없기 때문에 dp[i-1][1]은 고려하지 않음
    dp[i][1] = dp[i-1][0]+stair[i-1]

print(max(dp[N-1][1:])) # 마지막 계단을 밟은 경우 중 점수가 큰 값